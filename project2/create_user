#!/usr/bin/env bash


# =================================================
# File Name: create_user
# Author: Jesse Ha
# Created: 07-11-2024
# Last Modified: 08-11-2024
# Version: 1.1
# Description: Script that creates a new user on the system with specified options like username, multiple groups, home directory, and user's shell
# References:
#   [1]: bash conditionals - https://earthly.dev/blog/bash-conditionals/
#   [2]: Linux sort manual - https://man7.org/linux/man-pages/man1/sort.1.html
#   [3]: Using awk for column conditionals - https://stackoverflow.com/questions/14739057/using-awk-with-column-value-conditions
#   [4]: Linux tail manual - https://man7.org/linux/man-pages/man1/tail.1.html
#   [5]: Linux sed manual - https://man7.org/linux/man-pages/man1/sed.1p.html
#   [6]: Linux adduser manual - https://linux.die.net/man/8/adduser
# ==================================================

# Logic to check and require script to be run as root user or with sudo
if [[ $EUID -ne 0 ]]; then
  echo "This script needs to be run as a root user or with sudo privileges."
  exit 1
fi

# ======================================
# Function: usage
# Description: Display syntax and available options to run the script.
# Parameters:
#   None
# ======================================

usage() {
  echo "Usage: create_user -u | -g | -h | -s | -i "
  echo "Syntax: create_user [OPTION...] [ARGUMENTS...]"
  echo
  echo " -u USERNAME,     specify the username desired of the new user"
  echo " -g GROUPS,       specify the new groups or existing groups to add to the user, can take a string of one or more groups"
  echo " -h HOME,         specify the path to the user's home directory"
  echo " -s SHELL,        specify the path to the user's shell"
  echo " -i INFO,         display the usage guide and syntax with options"
  echo
  exit 0
}

# Initialize default variables

groups="wheel"
homedir=""
shell="/bin/bash"

# ===========================
# Main function with getopts
# ===========================

while getopts ":u:g:i:h:s:" OPT; do
  case $OPT in
    u) # Get username for new user
      username="${OPTARG}"      ;;
    g) # Get groups to add the user to
      groups="${OPTARG}"      ;;
    i) # Get specific information or comments for user
      info="${OPTARG}"  ;;
    h) # Get specified path of user's home directory
      homedir="${OPTARG}"  ;;
    s) # Get specified path to user's shell
      shell="${OPTARG}" ;;
    ?) # If invalid option, show usage function
      echo "Invalid option(s). Please read usage guide below."
      usage ;;
    :) # Display error message.
      echo "Error. Please read usage guide below."
      usage ;;
  esac
done

shift $((OPTIND -1))

# ====================
# Validate options
# ====================


# Logic to check if username option is null. [1]
if [[ -z "$username" ]]; then
  echo "======ERROR======"
  echo "A username is required."
  usage
fi

# Logic to check if username exists in /etc/passwd
# awk -F: searches each row and use line separator ':'
# -v assignment option to be used in awk command declaring local variable username as $username provided
# $1 == username checks if the first field in /etc/passwd matches the input username
if [[ $(awk -F: -v username="$username" '$1 == username {print "ERROR: DUPLICATE USER"}' /etc/passwd) ]]; then
  echo "======ERROR======"
  echo "This username exists."
  exit 1
fi

# By default get the next available uid starting at the greatest UID value then increment by 1
# use cat to look at contents of /etc/passwd file
# pipe to cut -d ":" -f3 to grab the third field and use ':' as the separator/delimiter with option -d
# pipe to sort -n to sort contents numerically
# pipe to tail -1 to give us the last entry (our largest value) 
uid=$(( "$(cat /etc/passwd | cut -d ":" -f3 | sort -n | tail -1)" + 1 ))
echo $uid

# By default set the groupid same as our user id.
# Logic to check if group id exists in /etc/group similar to username check logic
if [[ $(awk -F: -v gid="$uid" '$3 == gid {print "ERROR: GROUP EXISTS"}' /etc/group) ]]; then
  echo "======ERROR======"
  echo "This group id exists."
  exit 1
else
  gid=$uid
  # Append user to group file
  echo "$username:x:$gid:" >> /etc/group
fi

# If home directory option is unspecified, set default to /home/<user-name>
if [[ -z "$homedir" ]]; then
  homedir=/home/$username
fi

# Check if home directory exists (user might have manually created a custom directory)
# otherwise we make the home directory
if [[ -d $homedir ]]; then
  echo "Home directory already exists."
  exit 1
else
  mkdir -p "$homedir"
fi

# If info option is unspecified, set default to 'Regular User'
if [[ -z "$info" ]]; then
  info="Regular User"
fi

# If shell directory option is unspecified, set default to the initialized shell variable
if [[ -z "$shell" ]]; then
  shell=$shell
fi

# Logic to check if $groups has content
if [[ -n "$groups" ]]; then
  # Loop through string of groups
  for group in $groups; do

    # Each loop initialize max_group_id group to get the max groupid + 1 to get unique group ids
    max_group_id=$(( "$(cat /etc/group | cut -d ":" -f3 | sort -n | tail -1)" + 1 ))
    
    # Logic to check if the current iteration group name does not exist using awk
    if [[ ! $(awk -F: -v group="$group" '$1 == group {print "GROUP EXISTS"}' /etc/group) ]]; then

      # Case that group does not exist: Create new group + append user to said group [6]
      echo "======NOTE======"
      echo "Adding new group: $group"
      echo "$group:x:$max_group_id" >> /etc/group
      sed -i "/^$group:/ s/$/,$username/" /etc/group
    else

      # Case that group does exist: Append user to groups
      echo "Group: $group already exists. Appending user to group."
      sed -i "/^$group:/ s/$/,$username/" /etc/group
    fi
  done
fi

# ===========================
# Building User File Contents
# ===========================

# Append user entry to passwd file
echo "$username:x:$uid:$gid:$info:$homedir:$shell" >> /etc/passwd

# Append user entry to shadow file
echo "$username:!*::::::" >> /etc/shadow

# Copy contents of skeleton recursively to new user's home directory
cp -r /etc/skel/. "$homedir"

# Change ownership of home directory to user
chown -R "$username:$username" "$homedir"

# Change permissions for home directory of user (7 = all permissions only for user)
chmod -R 700 "$homedir"

# Prompts user to set password [6]
passwd "$username"
